.PHONY: usage all tests
.SILENT:

export GO111MODULE=on
# Enable static linking
export CGO_ENABLED=0

# Directory used to store the result of the build process
BUILD=build
# Name of the executable
EXECUTABLE=citop
# Name of the go project
PACKAGE=citop
PACKAGE_PATH=github.com/nbedos/citop
VERSION=$(shell git describe --tags --long --dirty)


usage:
	echo "Usage:"
	echo "    make all         # Build executable and manual pages (requires pandoc)"
	echo "    make clean       # Remove build directory"
	echo "    make man.go      # Build manual page in go format (requires pandoc)"
	echo "    make tests       # Run unit tests"

all: man.go $(BUILD) $(BUILD)/LICENSE
	MD="$$(sed '1s/\\<version\\>/$(VERSION)/' man.md)" && \
	echo "Building $(BUILD)/man.html..." && \
	echo "$$MD" | pandoc -s -t html5 --template pandoc_template.html > $(BUILD)/man.html && \
	echo "Building $(BUILD)/$(EXECUTABLE).man.1..." && \
	echo "$$MD" | pandoc -s -t man >  $(BUILD)/$(EXECUTABLE).man.1
	echo "Building $(BUILD)/$(EXECUTABLE)... (version $(VERSION))"
	go build -ldflags "-X main.Version=$(VERSION)" -o "$(BUILD)/$(EXECUTABLE)"

$(BUILD):
	mkdir -p $(BUILD)

clean:
	rm -rf $(BUILD)

man.go : man.md
	# Generate a go file containing the manual page for embedding in the executable
	echo "Building $@..."
	{ \
	    echo "// Do not edit. This file is generated by running 'make generated'." ; \
	    echo "package main" ; \
	    echo ; \
	    echo "import \"strings\"" ; \
	    echo ; \
	    echo "const generated = \`$$(pandoc -s -t man $< | sed 's/`/` + "`" + `/g')\`" ; \
	    echo ; \
	    echo "func manualPage() string {" ; \
	    echo "	return strings.Replace(generated, \"<version>\", Version, 1)" ; \
	    echo "}" ; \
	    echo "" ; \
	} > man.go

$(BUILD)/LICENSE : go.mod go.sum $(BUILD)
	# Concatenate license of $(PACKAGE) and licenses of dependencies
	echo "Building $@..." ;
	{ \
	    echo -e "Below is the license of $(PACKAGE) and of every package it uses" ; \
	    echo -e "\n\n====== $(PACKAGE_PATH) ======\n" ; \
	    fold -s LICENSE ; \
	    for pkg_dir in $$(go list -f '{{.Dir}}' -m all | grep -v $(PACKAGE)); \
	    do \
		find "$$pkg_dir" \
		    -maxdepth 1 \
		    -name LICENSE \
		    -exec echo -e "\n\n====== $$(echo $$pkg_dir | sed 's/.*\/go\/pkg\/mod\/\(.*\)/\1/') ======\n" \; \
		    -exec fold -s {} \; ; \
	    done \
	} > $@

tests:
	go test -v ./...
